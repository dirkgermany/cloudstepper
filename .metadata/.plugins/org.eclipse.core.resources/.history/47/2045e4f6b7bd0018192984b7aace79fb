package photocrm.meta;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import photocrm.exception.ServiceException;
import photocrm.exception.ServiceFault;
import photocrm.mapping.OrganizationMapper;
import photocrm.model.OrganizationEntity;
import photocrm.model.OrganizationFacade;
import services.photocrm.entity_service_organization.DeleteOrganizationRequest;
import services.photocrm.entity_service_organization.DeleteOrganizationResponse;
import services.photocrm.entity_service_organization.GetOrganizationByClientAndIdRequest;
import services.photocrm.entity_service_organization.GetOrganizationByClientAndIdResponse;
import services.photocrm.entity_service_organization.GetOrganizationByIdRequest;
import services.photocrm.entity_service_organization.GetOrganizationByIdResponse;
import services.photocrm.entity_service_organization.InsertOrganizationRequest;
import services.photocrm.entity_service_organization.InsertOrganizationResponse;
import services.photocrm.entity_service_organization.OrganizationOperationResult;
import services.photocrm.entity_service_organization.OrganizationXml;
import services.photocrm.entity_service_organization.UpdateOrganizationRequest;
import services.photocrm.entity_service_organization.UpdateOrganizationResponse;

@Component
public class DatabaseLayer {
	private static final Logger log = LoggerFactory.getLogger(OrganizationFacade.class);

	@Autowired
	private OrganizationFacade organizationFacade;

	public InsertOrganizationResponse insertOrganization(InsertOrganizationRequest request) {
		OrganizationEntity organizationEntity = new OrganizationEntity();
		OrganizationMapper.mapObjects(request, organizationEntity);
		OrganizationEntity entityReturned = null;
		try {
			entityReturned = organizationFacade.insertOrganization(organizationEntity);
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION INSERT ", "entity: " + organizationEntity));
		}

		if (null == entityReturned) {
			throw new ServiceException("ERROR INSERT",
					new ServiceFault("Entity not inserted ", "entity: " + organizationEntity));
		}

		InsertOrganizationResponse response = new InsertOrganizationResponse();
		OrganizationXml xml = new OrganizationXml();
		OrganizationMapper.mapObjects(entityReturned, xml);
		response.setOrganization(xml);
		response.setOperationResult(OrganizationOperationResult.OK);

		return response;
	}

	public GetOrganizationByIdResponse getOrganizationById(GetOrganizationByIdRequest request) throws ServiceException {
		OrganizationEntity countryEntityReturned = organizationFacade.getOrganizationById(request.getId());
		GetOrganizationByIdResponse response = new GetOrganizationByIdResponse();
		OrganizationXml xml = new OrganizationXml();
		OrganizationMapper.mapObjects(countryEntityReturned, xml);
		response.setOrganization(xml);

		return response;
	}

	private OrganizationEntity getOrganizationByClientAndId(int clientId, int id) throws ServiceException {
		OrganizationEntity organizationEntityReturned = null;
		try {
			organizationEntityReturned = organizationFacade.getOrganizationByClientAndId(clientId, id);
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION FIND ", "clientid: " + clientId + "; id: " + id));
		}

		if (null == organizationEntityReturned || 0 == organizationEntityReturned.getClientId() || 0 == organizationEntityReturned.getId()) {
			throw new ServiceException("ERROR: No Entity",
					new ServiceFault("EXCEPTION FIND ", "clientid: " + clientId + "; id: " + id));
		}

		return organizationEntityReturned;
	}

	private OrganizationEntity getOrganizationByClientAndId(OrganizationEntity entity) throws ServiceException {
		// Exception Handling happens in subCall
		return getOrganizationByClientAndId(entity.getClientId(), entity.getId());
	}
	
	public GetOrganizationByClientAndIdResponse getOrganizationByClientAndId(
			GetOrganizationByClientAndIdRequest request) throws ServiceException {
		// Exception Handling happens in subCall
		OrganizationEntity entityReturned = getOrganizationByClientAndId(request.getClientId(), request.getId());
		GetOrganizationByClientAndIdResponse response = new GetOrganizationByClientAndIdResponse();
		OrganizationXml xml = new OrganizationXml();
		OrganizationMapper.mapObjects(entityReturned, xml);
		response.setOrganization(xml);
		return response;
	}

	public UpdateOrganizationResponse updateOrganization(UpdateOrganizationRequest request) throws ServiceException {
		OrganizationEntity organizationEntity = new OrganizationEntity();
		OrganizationMapper.mapObjects(request, organizationEntity);

		// update and get actual data object from database
		try {
			organizationEntity = organizationFacade.updateOrganization(organizationEntity);
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION UPDATE ", "new Values: " + organizationEntity));
		}
		
		if (null == organizationEntity) {
			throw new ServiceException("ERROR: No Updated Entity",
					new ServiceFault("EXCEPTION UPDATE ", "new Values: " + organizationFacade));
		}

		UpdateOrganizationResponse response = new UpdateOrganizationResponse();
		
		OrganizationXml xml = new OrganizationXml();
		OrganizationMapper.mapObjects(organizationEntity, xml);
		response.setOrganization(xml);
		
		return response;
	}
	
	public DeleteOrganizationResponse deleteOrganization(DeleteOrganizationRequest request) throws ServiceException {
		OrganizationEntity organizationEntity = new OrganizationEntity();
		organizationEntity.setClientId(request.getClientId());
		organizationEntity.setId(request.getId());

		// delete
		try {
			organizationFacade.deleteOrganization(organizationEntity);
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION DELETE ", "entity: " + organizationEntity));
		}

		boolean deleted = false;
		try {
			getOrganizationByClientAndId(organizationEntity);

		} catch (Exception ex) {
			deleted = true;
		}

		if (!deleted) {
			throw new ServiceException("ERROR DELETE", new ServiceFault("Entity Not Empty", "entity: " + organizationEntity));
		}

		DeleteOrganizationResponse response = new DeleteOrganizationResponse();
		return response;
	}
}
