package com.dam.authentication;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.dam.authentication.ConfigProperties.Service;
import com.dam.authentication.model.PermissionStore;
import com.dam.authentication.model.entity.Permission;
import com.dam.authentication.types.Role;
import com.dam.authentication.types.ServiceDomain;

@Component
public class PermissionManager {
	
	@Autowired
	PermissionStore permissionStore;

		
	private static Map<Role, Map<ServiceDomain, Permission>> rightsAndRoles = new HashMap<>();
	private static Long lastUpdate = new Long(0);
	private static final Long UPDATE_INTERVAL = new Long(900000); // 60 * 1000 * 15 = 1900000 5 Minuten
	
//	public  static void updatePermissionMap(List<Permission> permissions) {
	public   void updatePermissionMap() {
		if (!isTimeForUpdate()) {
			return;
		}
		
		List<Permission> permissions = permissionStore.getPermissionList();
		Iterator<Permission> it = permissions.iterator();
		while (it.hasNext()) {
			Permission permission = it.next();
			Map<ServiceDomain, Permission> permissionForRole = new HashMap<>();
			permissionForRole.put(permission.getServiceDomain(),  permission);
			rightsAndRoles.put(permission.getRole(), permissionForRole);
		}
	}
	
	/*
	 * Calculates if the time for an update has come
	 */
	private static Boolean isTimeForUpdate() {
		if (System.currentTimeMillis() - lastUpdate > UPDATE_INTERVAL) {
			lastUpdate = System.currentTimeMillis();
			return true;
		}
		return false;
	}

	
	/**
	 * Adds Components with Permissions to a dedicated Role
	 * @param role
	 * @param serviceDomain
	 * @param rights
	 */
	public static synchronized void addPermission(Role role, ServiceDomain serviceDomain, Permission permission) {
		Map<ServiceDomain, Permission> rightsForRole = rightsAndRoles.get(role);
		if (null == rightsForRole) {
			rightsForRole = new HashMap<>();
		}
		rightsForRole.put(serviceDomain, permission);
		rightsAndRoles.put(role, rightsForRole);
	}
	
	/**
	 * Delivers Components with Permissions for a Role
	 * @param role
	 * @return
	 */
	public static synchronized Map<ServiceDomain, Permission> getPermissionForRole(Role role) {
		return rightsAndRoles.get(role);
	}
	
	/**
	 * Delivers Permissions to Component for a Role
	 * @param role
	 * @param serviceDomain
	 * @return
	 */
	public static synchronized Permission getRolePermission(Role role, ServiceDomain serviceDomain) {
		Map<ServiceDomain, Permission> map = rightsAndRoles.get(role);
		if (null == map) {
			return new Permission(Role.UNKNOWN, ServiceDomain.UNKNOWN, "---+---");
		}
		Permission permission = map.get(serviceDomain);
		if (null == permission) {
			return new Permission(Role.UNKNOWN, ServiceDomain.UNKNOWN, "---+---");
		}
		return permission;
	}
}
