package photocrm.business;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import photocrm.exception.ServiceException;
import photocrm.mapping.OrganizationMapper;
import photocrm.model.OrganizationEntity;
import photocrm.model.OrganizationFacade;
import services.photocrm.entity_service_organization.GetOrganizationByClientAndIdRequest;
import services.photocrm.entity_service_organization.GetOrganizationByClientAndIdResponse;
import services.photocrm.entity_service_organization.GetOrganizationByIdRequest;
import services.photocrm.entity_service_organization.GetOrganizationByIdResponse;
import services.photocrm.entity_service_organization.InsertOrganizationRequest;
import services.photocrm.entity_service_organization.InsertOrganizationResponse;
import services.photocrm.entity_service_organization.OrganizationType;
import services.photocrm.entity_service_organization.UpdateOrganizationRequest;
import services.photocrm.entity_service_organization.UpdateOrganizationResponse;

@Component
public class DoSomething {

	@Autowired
	private OrganizationFacade organizationFacade;

	public InsertOrganizationResponse insertOrganization(InsertOrganizationRequest request) {
		OrganizationEntity organizationEntity = new OrganizationEntity();
		organizationEntity.setName(request.getName());
		organizationEntity.setClientId(request.getClientId());
		organizationEntity.setOrganizationType(OrganizationType.valueOf(request.getOrganizationTypeString()));
		
		OrganizationEntity organizationEntityReturned = organizationFacade.insertOrganization(organizationEntity);
		InsertOrganizationResponse response = new InsertOrganizationResponse();
		response.setOrganization(OrganizationMapper.entityToXml(organizationEntityReturned));

		return response;
	}

	public GetOrganizationByIdResponse getOrganizationById(GetOrganizationByIdRequest request) throws ServiceException {
		OrganizationEntity countryEntityReturned = organizationFacade.getOrganizationById(request.getId());
		GetOrganizationByIdResponse response = new GetOrganizationByIdResponse();
		response.setOrganization(OrganizationMapper.entityToXml(countryEntityReturned));
		
		return response;
	}

	public GetOrganizationByClientAndIdResponse getOrganizationByClientAndId(
			GetOrganizationByClientAndIdRequest request) throws ServiceException {
		OrganizationEntity organizationEntityReturned = organizationFacade
				.getOrganizationByClientAndId(request.getClientId(), request.getId());
		GetOrganizationByClientAndIdResponse response = new GetOrganizationByClientAndIdResponse();
		response.setOrganization(OrganizationMapper.entityToXml(organizationEntityReturned));
		
		return response;
	}

	public UpdateOrganizationResponse updateOrganization(UpdateOrganizationRequest request) throws ServiceException {
		OrganizationEntity organizationEntity = new OrganizationEntity();
		organizationEntity.setClientId(request.getClientId());
		organizationEntity.setId(request.getId());
		organizationEntity.setName(request.getName());
		organizationEntity.setOrganizationType(OrganizationType.valueOf(request.getOrganizationTypeString()));
		OrganizationEntity organizationEntityReturned = organizationFacade
				.updateOrganization(organizationEntity);
		UpdateOrganizationResponse response = new UpdateOrganizationResponse();
		response.setOrganization(OrganizationMapper.entityToXml(organizationEntityReturned));
		
		return response;
	}
}
