package photocrm.meta;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import external.wsdl.DeleteOrganizationRequest;
import external.wsdl.DeleteOrganizationResponse;
import external.wsdl.GetPersonsByParentRequest;
import external.wsdl.GetPersonsByParentResponse;
import external.wsdl.InsertOrganizationRequest;
import external.wsdl.InsertOrganizationResponse;
import external.wsdl.InsertPersonRelationRequest;
import external.wsdl.InsertPersonRelationResponse;
import photocrm.client.OrganizationClient;
import photocrm.client.PersonClient;
import photocrm.mapping.OrganizationMapper;
import services.photocrm.soap_soap_service.AddPersonToOrganizationRequest;
import services.photocrm.soap_soap_service.AddPersonToOrganizationResponse;
import services.photocrm.soap_soap_service.CreateOrganizationRequest;
import services.photocrm.soap_soap_service.CreateOrganizationResponse;
import services.photocrm.soap_soap_service.DropOrganizationRequest;
import services.photocrm.soap_soap_service.DropOrganizationResponse;
import services.photocrm.soap_soap_service.FindPersonsByOrganizationRequest;
import services.photocrm.soap_soap_service.FindPersonsByOrganizationResponse;

/**
 * This class is the bridge between this domain service and the used microservices.
 * Incoming requests are mapped and sent to the underlying microservices.
 * The received responses then will be returned to the calling method.
 * @author dirk
 *
 */

@Component
public class WebClientLayer {

	// The used services are called by service clients
	@Autowired
	OrganizationClient organizationClient;
	@Autowired
	PersonClient personClient;

	// --------------- Organization related ----------------------
	public CreateOrganizationResponse createOrganization(CreateOrganizationRequest incomingRequest) {
		// Prepare Request which will be sent to the Entity-Service
		InsertOrganizationRequest outgoingRequest = new InsertOrganizationRequest();
		OrganizationMapper.mapObjects(incomingRequest, outgoingRequest);
		InsertOrganizationResponse outgoingResponse = organizationClient.insertOrganization(outgoingRequest);
		CreateOrganizationResponse incomingResponse = new CreateOrganizationResponse();
		OrganizationMapper.mapObjects(outgoingResponse, incomingResponse);
		return incomingResponse;
	}
	
	public DropOrganizationResponse dropOrganization (DropOrganizationRequest incomingRequest) {
		DeleteOrganizationRequest outgoingRequest = new DeleteOrganizationRequest();
		OrganizationMapper.mapObjects(incomingRequest, outgoingRequest);
		DeleteOrganizationResponse outgoingResponse = organizationClient.deleteOrganization(outgoingRequest);
		DropOrganizationResponse incomingResponse = new DropOrganizationResponse();
		OrganizationMapper.mapObjects(outgoingResponse, incomingResponse);
		return incomingResponse;
	}
	
	// --------------- Person related ----------------------
	public AddPersonToOrganizationResponse addPersonToOrganization (AddPersonToOrganizationRequest incomingRequest) {
		InsertPersonRelationRequest outgoingRequest = new InsertPersonRelationRequest();
		OrganizationMapper.mapObjects(incomingRequest, outgoingRequest);
		InsertPersonRelationResponse outgoingResponse = personClient.insertPersonRelation(outgoingRequest);
		AddPersonToOrganizationResponse incomingResponse = new AddPersonToOrganizationResponse();
		OrganizationMapper.mapObjects(outgoingResponse, incomingResponse);
		return incomingResponse;
	}

	public FindPersonsByOrganizationResponse findPersonsByOrganization (FindPersonsByOrganizationRequest incomingRequest) {
		GetPersonsByParentRequest outgoingRequest = new GetPersonsByParentRequest();
		OrganizationMapper.mapObjects(incomingRequest, outgoingRequest);
		GetPersonsByParentResponse outgoingResponse = personClient.getPersonsByParent(outgoingRequest);
		FindPersonsByOrganizationResponse incomingResponse = new FindPersonsByOrganizationResponse();
		OrganizationMapper.mapObjects(outgoingResponse, incomingResponse);
		return incomingResponse;
	}

}
