package com.photocrm.bus;

import org.apache.activemq.ActiveMQConnectionFactory;
import javax.jms.Connection;
import javax.jms.Session;
import javax.jms.Destination;
import javax.jms.ExceptionListener;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.TextMessage;

public class QueueConsumer {

	public static TextMessage consume(String queueURL, String queueName) {

		TheConsumer consumer = new TheConsumer();
		consumer.setConnectionData(queueURL, queueName);
		try {
			thread(consumer, false).wait(3000);
		} catch (InterruptedException ie) {
			// prima, thread ist vor Ablauf des Timouts fertig
			return consumer.getMessage();
		}

		return null;
	}

	public static Thread thread(Runnable runnable, boolean daemon) {
		Thread broker = new Thread(runnable);
		broker.setDaemon(daemon);
		broker.start();
		return broker;
	}

	public static class TheConsumer implements Runnable, ExceptionListener {
		private String queueURL;
		private String queueName;
		private TextMessage textMessageReceived;

		public void setConnectionData(String queueURL, String queueName) {
			this.queueURL = queueURL;
			this.queueName = queueName;
		}
		
		public TextMessage getMessage() {
			return textMessageReceived;
		}

		public void run() {
			try {
				// Create a ConnectionFactory
				ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(queueURL);
				// Create a Connection
				Connection connection = connectionFactory.createConnection();
				connection.start();
				connection.setExceptionListener(this);

				// Create a Session
				Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

				// Create the destination (Topic or Queue)
				Destination destination = session.createQueue(queueName);

				// Create a MessageConsumer from the Session to the Topic or Queue
				MessageConsumer consumer = session.createConsumer(destination);

				// Wait for a message
				Message message = consumer.receive(1000);

				if (message instanceof TextMessage) {
					TextMessage textMessage = (TextMessage) message;
					String text = textMessage.getText();
					System.out.println("Received: " + text);
					
					textMessageReceived = (TextMessage)message;
				} else {
					System.out.println("Received: " + message);
					textMessageReceived.setText(message.toString());
				}
				consumer.close();
				session.close();
				connection.close();

			} catch (JMSException ex) {
				System.out.println("Error: " + ex);
				ex.printStackTrace();
			}
		}

		public synchronized void onException(JMSException ex) {
			System.out.println("JMS Exception occured.Â  Shutting down client.");
		}
	}
}
