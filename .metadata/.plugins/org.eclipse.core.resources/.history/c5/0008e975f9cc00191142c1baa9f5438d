package com.dam.portfolio;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.stereotype.Controller;

import com.dam.exception.DamServiceException;
import com.dam.exception.PermissionCheckException;
import com.dam.portfolio.model.AssetClassModel;
import com.dam.portfolio.model.entity.AssetClass;
import com.dam.portfolio.rest.message.ConstructionCreateRequest;
import com.dam.portfolio.rest.message.ConstructionDropRequest;
import com.dam.portfolio.rest.message.ConstructionRequest;
import com.dam.portfolio.rest.message.RestRequest;
import com.dam.portfolio.rest.message.ConstructionUpdateRequest;

/**
 * Handles active and non active Tokens
 * 
 * @author dirk
 *
 */
@Controller
@ComponentScan
public class AssetClassStore {

	@Autowired
	private AssetClassModel assetClassModel;

	/**
	 * Save getter for AssetClass. Checks requesting user
	 * 
	 * @param assetClass
	 * @return
	 */
	public AssetClass getAssetClassSafe(ConstructionRequest constructionRequest)
			throws DamServiceException {
		checkRequestedParamsRequest_Id_Rights(constructionRequest, constructionRequest.getRequestorUserId(),
				constructionRequest.getRights());

		if (null == constructionRequest.getAssetClassId()) {
			throw new DamServiceException(new Long(400), "Invalid Request", "assetClassId is not set.");
		}

		// Check if the permissions is set
		PermissionCheck.isReadPermissionSet(constructionRequest.getRequestorUserId(), null,
				constructionRequest.getRights());

		AssetClass assetClass = getAssetClassById(
				constructionRequest.getAssetClassId());

		if (null == assetClass) {
			throw new DamServiceException(new Long(404), "AssetClass Unknown",
					"AssetClass not found or invalid request");
		}

		return assetClass;
	}

	/**
	 * Creation of assetClass requests existing userId, givenName and
	 * lastName. userId in Entity Container mustn't be null
	 * 
	 * @param assetClassContainer
	 * @return
	 * @throws PermissionCheckException
	 */
	public AssetClass createAssetClassSafe(ConstructionCreateRequest constructionCreateRequest)
			throws DamServiceException {
		checkRequestedParamsRequest_Id_Rights(constructionCreateRequest, constructionCreateRequest.getRequestorUserId(),
				constructionCreateRequest.getRights());

		checkRequestedParamsAssetClass(constructionCreateRequest.getAssetClass());

		// Save database requests
		PermissionCheck.isWritePermissionSet(constructionCreateRequest.getRequestorUserId(), null,
				constructionCreateRequest.getRights());

		if (null == constructionCreateRequest.getAssetClass().getRisc()
				|| null == constructionCreateRequest.getAssetClass().getCallMoneyPct()
				|| null == constructionCreateRequest.getAssetClass().getGoldPct()
				|| null == constructionCreateRequest.getAssetClass().getLoanPct()
				|| null == constructionCreateRequest.getAssetClass().getSharePct()
				|| null == constructionCreateRequest.getAssetClass().getValidFrom()
				|| null == constructionCreateRequest.getAssetClass().getValidUntil()) {
			throw new DamServiceException(new Long(400), "Invalid Request", "AssetClass data not complete");
		}

		// check if still exists
		// direct by assetClassId
		AssetClass existingAssetClass = getAssetClassById(
				constructionCreateRequest.getAssetClass().getAssetClassId());
		
		if (null == existingAssetClass) {
			existingAssetClass = getAssetClassByName(constructionCreateRequest.getAssetClass().getConstructionName());
		}

		if (null != existingAssetClass) {
			return updateAssetClass(existingAssetClass,
					constructionCreateRequest.getAssetClass());
		}

		AssetClass assetClass;
		
		try {
		// save if all checks are ok and the assetClass doesn't exist
		assetClass = assetClassModel
				.save(constructionCreateRequest.getAssetClass());
		} catch (Exception e) {
			throw new DamServiceException(new Long(500), "Portfolioconstruction could not be stored", e.getMessage());
		}

		if (null == assetClass) {
			throw new DamServiceException(new Long(422), "AssetClass not created",
					"AssetClass still exists, data invalid or not complete");
		}
		return assetClass;

	}

	/**
	 * Save update; requesting user must be user in storage
	 * 
	 * @param userId
	 * @param userStored
	 * @param userUpdate
	 * @return
	 */
	public AssetClass updateAssetClassSafe(ConstructionUpdateRequest constructionUpdateRequest)
			throws DamServiceException {
		checkRequestedParamsRequest_Id_Rights(constructionUpdateRequest, constructionUpdateRequest.getRequestorUserId(),
				constructionUpdateRequest.getRights());

		checkRequestedParamsAssetClass(constructionUpdateRequest.getAssetClass());

		// Check if the permissions is set
		PermissionCheck.isWritePermissionSet(constructionUpdateRequest.getRequestorUserId(),
				null,
				constructionUpdateRequest.getRights());

		// check if still exists
		AssetClass existingAssetClass = getAssetClassById(
				constructionUpdateRequest.getAssetClass().getAssetClassId());

		// AssetClass must exist and userId ist not permutable
		if (null == existingAssetClass) {
			throw new DamServiceException(new Long(404), "AssetClass for update not found",
					"AssetClass with assetClassId doesn't exist.");
		}

		return updateAssetClass(existingAssetClass,
				constructionUpdateRequest.getAssetClass());
	}

	/**
	 * Secure drop, user must be owner
	 * 
	 * @param userId
	 * @param assetClass
	 * @return
	 */
	public Long dropAssetClassSafe(ConstructionDropRequest constructionDropRequest) throws DamServiceException {
		checkRequestedParamsRequest_Id_Rights(constructionDropRequest, constructionDropRequest.getRequestorUserId(), constructionDropRequest.getRights());
		checkRequestedParamsAssetClass(constructionDropRequest.getAssetClass());

		// Save database requests
		PermissionCheck.isDeletePermissionSet(constructionDropRequest.getRequestorUserId(),	null, constructionDropRequest.getRights());

		AssetClass existingAssetClass = getAssetClassById(
				constructionDropRequest.getAssetClass().getAssetClassId());

		if (null == existingAssetClass) {
			throw new DamServiceException(new Long(404), "AssetClass could not be dropped",
					"AssetClass does not exist or could not be found in database.");
		}

		return dropAssetClass(existingAssetClass);

	}
	
	private AssetClass getAssetClassByName(String constructionName) {
		return assetClassModel.findByConstructionName(constructionName);
	}

	private AssetClass getAssetClassById(Long assetClassId) {
		if (null == assetClassId) {
			return null;
		}

		Optional<AssetClass> optionalAssetClass = assetClassModel
				.findById(assetClassId);
		if (null != optionalAssetClass && optionalAssetClass.isPresent()) {
			return optionalAssetClass.get();
		}
		return null;
	}


	/**
	 * Update assetClass with changed values
	 * 
	 * @param assetClassForUpdate
	 * @param assetClassContainer
	 * @return
	 */
	private AssetClass updateAssetClass(AssetClass assetClassForUpdate,
			AssetClass assetClassContainer) throws DamServiceException {
		
		if (null != assetClassForUpdate && null != assetClassContainer) {
			assetClassForUpdate.updateEntity(assetClassContainer);
			try {
				return assetClassModel.save(assetClassForUpdate);
			} catch (Exception e) {
				throw new DamServiceException(new Long(409),
						"AssetClass could not be saved. Perhaps duplicate keys.", e.getMessage());
			}
		}
		throw new DamServiceException(new Long(404), "AssetClass could not be saved",
				"Check AssetClass data in request.");
	}

	private Long dropAssetClass(AssetClass assetClass) {
		if (null != assetClass) {
			assetClassModel.deleteById(assetClass.getAssetClassId());
			AssetClass deletedAssetClass = getAssetClassById(
					assetClass.getAssetClassId());
			if (null == deletedAssetClass) {
				return new Long(200);
			}
		}

		return new Long(10);
	}

	private void checkRequestedParamsRequest_Id_Rights(RestRequest request, Long requestorUserId, String rights)
			throws DamServiceException {
		if (null == request) {
			throw new DamServiceException(new Long(400), "Invalid Request", "Request is null.");
		}
		if (null == requestorUserId) {
			throw new DamServiceException(new Long(400), "Invalid Request",
					"requestorUserId is recommended but not set.");
		}
		if (null == rights || rights.isEmpty()) {
			throw new DamServiceException(new Long(400), "Invalid Request",
					"User rights are recommended but are null or empty.");
		}
	}

	private void checkRequestedParamsAssetClass(AssetClass assetClass)
			throws DamServiceException {
		if (null == assetClass) {
			throw new DamServiceException(new Long(400), "Invalid Request",
					"AssetClass is null.");
		}
	}

}
