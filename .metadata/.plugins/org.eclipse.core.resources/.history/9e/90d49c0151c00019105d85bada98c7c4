package com.dam;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.stereotype.Controller;


/**
 * Handles active and non active Tokens
 * 
 * @author dirk
 *
 */
@Controller
@ComponentScan
public class PermissionStore {

	@Autowired
	private PermissionModel permissionModel;

	public List<Permission> getPermissionList(String permissionModelName, String password) {
		List<Permission> rolePermissions = new ArrayList<Permission>();
		permissionModel.findAll().forEach((Permission permission) -> rolePermissions.add(permission));
		return rolePermissions;
	}

	/**
	 * Standard read by id
	 * 
	 * @param _id
	 * @return
	 */
	public Permission getPermission(Long id) {
		if (null == id) {
			return null;
		}

		Optional<Permission> optionalPermission = permissionModel.findById(id);
		if (null != optionalPermission && optionalPermission.isPresent()) {
			return optionalPermission.get();
		}
		return null;
	}

	public Permission getPermission(Role role) {
		if (null == role) {
			return null;
		}
		return permissionModel.findByRole(role);
	}

	public Permission findPermission(Permission rolePermission) {
		if (null == rolePermission || (null == rolePermission.get_id() && null == rolePermission.getRole())) {
			return null;
		}

		Permission storedPermission = null;

		if (null != rolePermission && null != rolePermission.get_id()) {
			storedPermission = getPermission(rolePermission.get_id());
		} else if (null != rolePermission && null != rolePermission.getRole()) {
			storedPermission = permissionModel.findByRole(rolePermission.getRole());
		}

		return storedPermission;
	}

	/**
	 * Create or Update
	 */
	public Permission createPermission(Permission rolePermission) {
		if (null == rolePermission || null == rolePermission.getPermission() || null == rolePermission.getRole()
				|| null == rolePermission.getServiceDomain()) {
			return null;
		}

		// Overwrite
		Permission storedPermission = findPermission(rolePermission);
		if (null != storedPermission) {
			storedPermission.updateEntity(rolePermission);
			permissionModel.update(storedPermission);
			return storedPermission;
		}

		return permissionModel.save(rolePermission);
	}

	/**
	 * Explicit Update
	 * 
	 * @param rolePermission
	 * @return
	 */
	public Permission updatePermission(Permission rolePermission) {
		Permission storedPermission = findPermission(rolePermission);
		if (null != storedPermission) {
			storedPermission.updateEntity(rolePermission);
			permissionModel.update(storedPermission);
			return storedPermission;
		}
		return null;
	}

	/**
	 * Drop by Entity
	 * 
	 * @param rolePermission
	 * @return
	 */
	public Long dropPermission(Permission rolePermission) {
		Permission storedPermission = findPermission(rolePermission);

		if (null == storedPermission) {
			return new Long(10);
		}

		permissionModel.deleteById(rolePermission.get_id());
		if (null == getPermission(rolePermission.get_id())) {
			return new Long(0);
		}

		return new Long(10);
	}

	/**
	 * Drop by Role
	 * 
	 * @param role
	 * @return
	 */
	public Long dropPermission(Role role) {
		if (null == role) {
			return new Long(77);
		}

		Permission storedPermission = getPermission(role);
		if (null == storedPermission) {
			return new Long(10);
		}

		permissionModel.deleteById(storedPermission.get_id());
		if (null == getPermission(storedPermission.get_id())) {
			return new Long(0);
		}

		return new Long(10);
	}

	/**
	 * Drop by ID
	 * 
	 * @param id
	 * @return
	 */
	public Long dropPermission(Long id) {
		if (null == id) {
			return new Long(10);
		}

		permissionModel.deleteById(id);
		if (null == getPermission(id)) {
			return new Long(0);
		}

		return new Long(10);
	}

}
