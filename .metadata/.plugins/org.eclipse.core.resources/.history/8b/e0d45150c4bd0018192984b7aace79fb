package photocrm.client;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ws.client.core.support.WebServiceGatewaySupport;
import org.springframework.ws.soap.client.core.SoapActionCallback;

import external.wsdl.DeleteOrganizationRequest;
import external.wsdl.DeleteOrganizationResponse;
import external.wsdl.GetOrganizationByClientAndIdRequest;
import external.wsdl.GetOrganizationByClientAndIdResponse;
import external.wsdl.GetOrganizationByIdRequest;
import external.wsdl.GetOrganizationByIdResponse;
import external.wsdl.InsertOrganizationRequest;
import external.wsdl.InsertOrganizationResponse;
import external.wsdl.InsertPersonRelationRequest;
import external.wsdl.InsertPersonRelationResponse;
import photocrm.ConfigProperties;
import photocrm.exception.ServiceException;
import photocrm.exception.ServiceFault;
import photocrm.mapping.OrganizationMapper;
import services.photocrm.soap_soap_service.AddPersonToCompanyRequest;
import services.photocrm.soap_soap_service.AddPersonToCompanyResponse;
import services.photocrm.soap_soap_service.DropOrganizationByClientAndIdRequest;
import services.photocrm.soap_soap_service.DropOrganizationByClientAndIdResponse;

public class OrganizationClient extends WebServiceGatewaySupport {

	// Configuration
	@Autowired
	ConfigProperties config;

	private static final Logger log = LoggerFactory.getLogger(OrganizationClient.class);
	
	private String getExternalUri() {
		return "http://" + config.getOrganization().getHost() + ":" + config.getOrganization().getPort() + "/ws/organizations";
	}
	
	private String getExternalEndpoint (Class clazz) {
		return "http://photocrm.services/entity-service-organization/" + clazz.getName();
	}

	/**
	 * Create new Organization
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public InsertOrganizationResponse insertOrganization(InsertOrganizationRequest request) throws ServiceException {
		try {
			InsertOrganizationResponse response = (InsertOrganizationResponse) getWebServiceTemplate()
					.marshalSendAndReceive(
							getExternalUri(),
							request, new SoapActionCallback(
									getExternalEndpoint(request.getClass())));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION INSERT ", "request: " + OrganizationMapper.toString(request)));
		}
	}

	/**
	 * Find Organization by Client and ID
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public GetOrganizationByClientAndIdResponse getOrganizationByClientAndId(GetOrganizationByClientAndIdRequest request) throws ServiceException {
		try {
			GetOrganizationByClientAndIdResponse response = (GetOrganizationByClientAndIdResponse) getWebServiceTemplate()
					.marshalSendAndReceive(
							getExternalUri(),
							request, new SoapActionCallback(
									getExternalEndpoint(request.getClass())));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION FIND ", "request: " + OrganizationMapper.toString(request)));
		}
	}

	/**
	 * Find Organization by ID
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public GetOrganizationByIdResponse getOrganizationById(GetOrganizationByIdRequest request) throws ServiceException {
		try {
			GetOrganizationByIdResponse response = (GetOrganizationByIdResponse) getWebServiceTemplate()
					.marshalSendAndReceive(
							getExternalUri(),
							request, new SoapActionCallback(
									getExternalEndpoint(request.getClass())));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION FIND ", "request: " + OrganizationMapper.toString(request)));
		}
	}
	
	/**
	 * Drop Organization by ID
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public  DeleteOrganizationResponse dropOrganizationByClientAndId(DeleteOrganizationRequest request) throws ServiceException {
		try {
			DeleteOrganizationResponse response = (DeleteOrganizationResponse) getWebServiceTemplate()
					.marshalSendAndReceive(
							getExternalUri(),
							request, new SoapActionCallback(
									getExternalEndpoint(request.getClass())));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION FIND ", "request: " + OrganizationMapper.toString(request)));
		}
	}
	
	public InsertPersonRelationResponse addPersonToOrganization(InsertPersonRelationRequest request) throws ServiceException {
		InsertPersonRelationResponse response = (InsertPersonRelationResponse) getWebServiceTemplate()
				.marshalSendAndReceive(
						getExternalUri(),
						request, new SoapActionCallback(
								getExternalEndpoint(request.getClass())));
		return response;
	}
}