package photocrm.client;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ws.client.core.support.WebServiceGatewaySupport;
import org.springframework.ws.soap.client.core.SoapActionCallback;

import external.wsdl.DeleteAddressRequest;
import external.wsdl.DeleteAddressResponse;
import external.wsdl.GetAddressRequest;
import external.wsdl.GetAddressResponse;
import external.wsdl.GetAddressByIdRequest;
import external.wsdl.GetAddressByIdResponse;
import external.wsdl.InsertAddressRequest;
import external.wsdl.InsertAddressResponse;
import external.wsdl.UpdateAddressRequest;
import external.wsdl.UpdateAddressResponse;
import photocrm.ConfigProperties;
import photocrm.exception.ServiceException;
import photocrm.exception.ServiceFault;
import photocrm.mapping.AddressMapper;


public class AddressClient extends WebServiceGatewaySupport {

	// Configuration
	@Autowired
	ConfigProperties config;

	private static final Logger log = LoggerFactory.getLogger(AddressClient.class); 

	private String getExternalUri() {
		return "http://" + config.getAddress().getHost() + ":" + config.getAddress().getPort()
				+ "/ws/addresss";
	}

	private String getExternalEndpoint(String endpoint) {
		System.out.println("........... Endpoint ...... " + "http://photocrm.services/entity-service-address/" + endpoint);
		return "http://photocrm.services/entity-service-address/" + endpoint;
	}

	/**
	 * Create new Address
	 * 
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public InsertAddressResponse insertAddress(InsertAddressRequest request) throws ServiceException {
		try {
			InsertAddressResponse response = (InsertAddressResponse) getWebServiceTemplate()
					.marshalSendAndReceive(getExternalUri(), request,
							new SoapActionCallback(getExternalEndpoint("insertAddress")));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION INSERT ", "request: " + AddressMapper.toString(request)));
		}
	}

	/**
	 * Update Address
	 * 
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public UpdateAddressResponse updateAddress(UpdateAddressRequest request) throws ServiceException {
		try {
			UpdateAddressResponse response = (UpdateAddressResponse) getWebServiceTemplate()
					.marshalSendAndReceive(getExternalUri(), request,
							new SoapActionCallback(getExternalEndpoint("updateAddress")));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION INSERT ", "request: " + AddressMapper.toString(request)));
		}
	}

	/**
	 * Find Address by Client and ID
	 * 
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public GetAddressResponse getAddress(
			GetAddressRequest request) throws ServiceException {
		try {
			GetAddressResponse response = (GetAddressResponse) getWebServiceTemplate()
					.marshalSendAndReceive(getExternalUri(), request,
							new SoapActionCallback(getExternalEndpoint("getAddress")));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION FIND ", "request: " + AddressMapper.toString(request)));
		}
	}

	/**
	 * Find Address by ID
	 * 
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public GetAddressByIdResponse getAddressById(GetAddressByIdRequest request) throws ServiceException {
		try {
			GetAddressByIdResponse response = (GetAddressByIdResponse) getWebServiceTemplate()
					.marshalSendAndReceive(getExternalUri(), request,
							new SoapActionCallback(getExternalEndpoint("getAddressById")));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION FIND ", "request: " + AddressMapper.toString(request)));
		}
	}
	

	/**
	 * Drop Address by ID
	 * 
	 * @param request
	 * @return
	 * @throws ServiceException
	 */
	public DeleteAddressResponse deleteAddress(DeleteAddressRequest request)
			throws ServiceException {
		try {
			DeleteAddressResponse response = (DeleteAddressResponse) getWebServiceTemplate()
					.marshalSendAndReceive(getExternalUri(), request,
							new SoapActionCallback(getExternalEndpoint("deleteAddress")));
			return response;
		} catch (Exception ex) {
			log.error(ex.getMessage());
			throw new ServiceException(ex.getMessage(),
					new ServiceFault("EXCEPTION FIND ", "request: " + AddressMapper.toString(request)));
		}
	}
}